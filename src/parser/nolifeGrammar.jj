/**
 * JavaCC file
 */

options
{
  JDK_VERSION = "1.8";
}

PARSER_BEGIN(NolifeParser)
package parser;
import ast.*;
import visitor.*;

public class NolifeParser
{
  private static ASTNodeFactory factory = new ASTNodeFactory();
}

PARSER_END(NolifeParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| < "{" (~[ "}" ])* "}" >
}

TOKEN : /* keywords */
{
  < O_MOD : "MOD" >
| < O_AND : "AND" >
| < O_ARRAY : "ARRAY" >
| < O_BEGIN : "BEGIN" >
| < O_CHARACTER : "CHARACTER" >
| < O_DO : "DO" >
| < O_ELSE : "ELSE" >
| < O_END : "END" >
| < O_FLOAT : "FLOAT" >
| < O_FUNCTION : "FUNCTION" >
| < O_IF : "IF" >
| < O_INTEGER : "INTEGER" >
| < O_NOT : "NOT" >
| < O_OF : "OF" >
| < O_OR : "OR" >
| < O_PROCEDURE : "PROCEDURE" >
| < O_PROGRAM : "PROGRAM" >
| < O_READ : "READ" >
| < O_RETURN : "RETURN" >
| < O_THEN : "THEN" >
| < O_VAR : "VAR" >
| < O_WHILE : "WHILE" >
| < O_WRITE : "WRITE" >
| < O_CASE : "CASE" >
}

TOKEN : /* other lexical tokens */
{
  < O_LE : "<=" >
| < O_LT : "<" >
| < O_GE : ">=" >
| < O_GT : ">" >
| < O_EQ : "=" >
| < O_NE : "<>" >
| < O_ASSIGN : ":=" >
| < O_COLON : ":" >
| < O_SEMICOLON : ";" >
| < O_COMMA : "," >
| < O_LBRACKET : "[" >
| < O_RBRACKET : "]" >
| < O_LPAREN : "(" >
| < O_RPAREN : ")" >
| < O_DOT : "." >
| < O_PLUS : "+" >
| < O_MINUS : "-" >
| < O_TIMES : "*" >
| < O_CHAR : "'" ~[ "'" ] "'" >
| < O_STRING : "'" ~[ "'" ] (~[ "'" ])+ "'" >
| < #DIGIT : [ "0"-"9" ] >
| < #ALPHA :
    [ "a"-"z" ]
  | [ "A"-"Z" ] >
| < O_IDENTIFIER :
    < ALPHA >
    (
      < ALPHA >
    | < DIGIT >
    )* >
| < #EXPONENT :
    (
      "e"
    | "E"
    )
    (
      "+"
    | "-"
    )?
    (< DIGIT >)+ >
| < O_FLOATCON :
    < O_INT >
    (
      < O_DOT > (< DIGIT >)+ (< EXPONENT >)?
    | < EXPONENT >
    ) >
| < O_INT :
    "0"
  | [ "1"-"9" ] (< DIGIT >)* >
}

ASTNode program() :
{
  ASTNode programNode = factory.makeASTNode("ProgramNode");
  Token programName;
  ASTNode declarationsNode = null;
  ASTNode subProgramDeclaration = null;
  ASTNode compoundStatement = null;
}
{
  < O_PROGRAM > programName = < O_IDENTIFIER > < O_SEMICOLON >
  {
    programNode.addLabel(programName.image);
  }
  (
    declarationsNode = decls()
    {
      programNode.addChild(declarationsNode);
    }
  )?
  (
    subProgramDeclaration = subprogram_decls()
    {
      programNode.addChild(subProgramDeclaration);
    }
  )?
  compoundStatement = compound_stmt()
  {
    programNode.addChild(compoundStatement);
  }
  {
    return programNode;
  }
}

ASTNode decls() :
{
  ASTNode declarations = factory.makeASTNode("DeclNode");
  ASTNode declarationsList = null;
}
{
  < O_VAR > declarationsList = decl_list()
  {
    declarations.addChild(declarationsList);
    return declarations;
  }
}

ASTNode decl_list() :
{
  ASTNode declarationsList = factory.makeASTNode("DeclListNode");
  ASTNode idList = null;
  ASTNode typeNode = null;
}
{
  (
    idList = identifier_list() < O_COLON > typeNode = type() < O_SEMICOLON >
    {
      declarationsList.addChild(idList).addChild(typeNode);
    }
  )+
  {
    return declarationsList;
  }
}

ASTNode identifier_list() :
{
  Token variableName;
  ASTNode variableNode = null;
  ASTNode idList = factory.makeASTNode("IdListNode");
}
{
  variableName = < O_IDENTIFIER >
  {
    variableNode = factory.makeASTNode("IdDeclNode").addLabel(variableName.image).addLineNumber(variableName.beginLine);
    idList.addChild(variableNode);
  }
  (
    < O_COMMA > variableName = < O_IDENTIFIER >
    {
      variableNode = factory.makeASTNode("IdDeclNode").addLabel(variableName.image).addLineNumber(variableName.beginLine);
      idList.addChild(variableNode);
    }
  )*
  {
    return idList;
  }
}

ASTNode type() :
{
  ASTNode typeNode = null;
}
{
  (
    typeNode = standard_type()
  | 
    typeNode = array_type()
  )
  {
    return typeNode;
  }
}

ASTNode standard_type() :
{
  ASTNode typeNode = null;
}
{
  (
    < O_INTEGER >
    {
      typeNode = factory.makeASTNode("IntTypeNode").addLabel("INTEGER");
    }
  | < O_FLOAT >
    {
      typeNode = factory.makeASTNode("FloatTypeNode").addLabel("FLOAT");
    }
  | < O_CHARACTER >
    {
      typeNode = factory.makeASTNode("CharTypeNode").addLabel("CHARACTER");
    }
  )
  {
    return typeNode;
  }
}

ASTNode array_type() :
{
  ASTNode arrayNode = factory.makeASTNode("ArrayTypeNode").addLabel("ARRAY");
  ASTNode typeNode = null;
  ASTNode dimensions = null;
  ASTNode leftBracket = factory.makeASTNode("BracketNode").addLabel("[");
  ASTNode rightBracket = factory.makeASTNode("BracketNode").addLabel("]");
}
{
  < O_ARRAY > < O_LBRACKET > dimensions = dim() < O_RBRACKET > < O_OF > typeNode = standard_type()
  {
    arrayNode.addChild(leftBracket).addChild(dimensions).addChild(rightBracket).addChild(typeNode);
    return arrayNode;
  }
}

ASTNode dim() :
{
  ASTNode dimensions = factory.makeASTNode("DimNode");
  Token minValue;
  Token maxValue;
}
{
  (
    minValue = < O_INT > < O_DOT > < O_DOT > maxValue = < O_INT >
  | minValue = < O_CHAR > < O_DOT > < O_DOT > maxValue = < O_CHAR >
  )
  {
    ASTNode minDimNode = factory.makeASTNode("MinDimNode").addLabel(minValue.image);
    ASTNode maxDimNode = factory.makeASTNode("MaxDimNode").addLabel(maxValue.image);
    dimensions.addChild(minDimNode).addChild(maxDimNode);
    return dimensions;
  }
}

ASTNode subprogram_decls() :
{
  ASTNode subProgramDeclaration = factory.makeASTNode("SubProgDeclNode");
  ASTNode subProgram = null;
}
{
  (
    subProgram = subprogram_decl() < O_SEMICOLON >
    {
      subProgramDeclaration.addChild(subProgram);
    }
  )+
  {
    return subProgramDeclaration;
  }
}

ASTNode subprogram_decl() :
{
  ASTNode subProgram = factory.makeASTNode("SubProgNode");
  ASTNode subProgramHead = null;
  ASTNode compoundStatement = null;
  ASTNode declarationsNode = null;
}
{
  subProgramHead = subprogram_head()
  {
    subProgram.addChild(subProgramHead);
  }
  (
    declarationsNode = decls()
    {
      subProgram.addChild(declarationsNode);
    }
  )?
  compoundStatement = compound_stmt()
  {
    subProgram.addChild(compoundStatement);
    return subProgram;
  }
}

ASTNode subprogram_head() :
{
  ASTNode subProgramHead = factory.makeASTNode("SubProgHeadNode");
  Token type;
  Token id;
  ASTNode argumentsNode = null;
  ASTNode subProgramType = null;
  ASTNode funcDec = null;
  ASTNode typeNode = null;
}
{
  (
    type = < O_FUNCTION > id = < O_IDENTIFIER >
    {
      subProgramType = factory.makeASTNode("SubProgTypeNode").addLabel(type.image);
      funcDec = factory.makeASTNode("IdDeclNode").addLabel(id.image).addLineNumber(id.beginLine);
      subProgramHead.addChild(subProgramType).addChild(funcDec);
    }
    (
      argumentsNode = arguments()
      {
        subProgramHead.addChild(argumentsNode);
      }
    )?
    < O_COLON > typeNode = standard_type() < O_SEMICOLON >
    {
      subProgramHead.addChild(typeNode);
    }
  | type = < O_PROCEDURE > id = < O_IDENTIFIER >
    {
      subProgramType = factory.makeASTNode("SubProgTypeNode").addLabel(type.image);
      funcDec = factory.makeASTNode("IdDeclNode").addLabel(id.image).addLineNumber(id.beginLine);
      subProgramHead.addChild(subProgramType).addChild(funcDec);
    }
    (
      argumentsNode = arguments()
      {
        subProgramHead.addChild(argumentsNode);
      }
    )?
    < O_SEMICOLON >
  )
  {
    return subProgramHead;
  }
}

ASTNode arguments() :
{
  ASTNode argumentsNode = factory.makeASTNode("ArgsNode");
  ASTNode parameterList = null;
}
{
  < O_LPAREN > parameterList = parameter_list() < O_RPAREN >
  {
    ASTNode leftParen = factory.makeASTNode("ParenNode").addLabel("(");
    ASTNode rightParen = factory.makeASTNode("ParenNode").addLabel(")");
    argumentsNode.addChild(leftParen).addChild(parameterList).addChild(rightParen);
    return argumentsNode;
  }
}

ASTNode parameter_list() :
{
  ASTNode parameterListNode = factory.makeASTNode("ParamListNode");
  ASTNode idList = null;
  ASTNode typeNode = null;
}
{
  idList = identifier_list() < O_COLON > typeNode = type()
  {
    parameterListNode.addChild(idList).addChild(typeNode);
  }
  (
    < O_SEMICOLON > idList = identifier_list() < O_COLON > typeNode = type()
    {
      parameterListNode.addChild(idList).addChild(typeNode);
    }
  )*
  {
    return parameterListNode;
  }
}

ASTNode compound_stmt() :
{
  ASTNode compoundStatement = factory.makeASTNode("CmpStmtNode");
  ASTNode statementList = null;
}
{
  < O_BEGIN > statementList = stmt_list() < O_END >
  {
    return compoundStatement.addChild(statementList);
  }
}

ASTNode stmt_list() :
{
  ASTNode statementList = factory.makeASTNode("StmtListNode");
  ASTNode statement = null;
}
{
  statement = stmt()
  {
    statementList.addChild(statement);
  }
  (
    < O_SEMICOLON > statement = stmt()
    {
      statementList.addChild(statement);
    }
  )*
  {
    return statementList;
  }
}

ASTNode stmt() :
{
  ASTNode statement = null;
}
{
  (
    LOOKAHEAD(2)
    statement = assignment()
  | statement = if_stmt()
  | statement = while_stmt()
  | statement = procedure_invocation()
  | statement = i_o_stmt()
  | statement = compound_stmt()
  | statement = return_stmt()
  | statement = case_stmt()
  )
  {
    return statement;
  }
}

ASTNode assignment() :
{
  ASTNode assignment = factory.makeASTNode("AssignmentNode").addLabel(":=");
  ASTNode idDefinitionNode = null;
  ASTNode expressionNode = null;
}
{
  idDefinitionNode = variable() < O_ASSIGN > expressionNode = expr()
  {
    assignment.addChild(idDefinitionNode).addChild(expressionNode);
    return assignment;
  }
}

ASTNode if_stmt() :
{
  ASTNode ifStmt = factory.makeASTNode("IfStmtNode");
  ASTNode expressionNode = null;
  ASTNode statement = null;
}
{
  < O_IF > expressionNode = expr() < O_THEN > statement = stmt()
  {
    ifStmt.addChild(expressionNode).addChild(statement);
  }
  [
    LOOKAHEAD(< O_ELSE >)
    < O_ELSE > statement = stmt()
    {
      ifStmt.addChild(statement);
    }
  ]
  {
    return ifStmt;
  }
}

ASTNode while_stmt() :
{
  ASTNode whileStmt = factory.makeASTNode("WhileStmtNode");
  ASTNode expressionNode = null;
  ASTNode statement = null;
}
{
  < O_WHILE > expressionNode = expr() < O_DO > statement = stmt()
  {
    whileStmt.addChild(expressionNode).addChild(statement);
    return whileStmt;
  }
}

ASTNode procedure_invocation() :
{
  ASTNode procedureInvocation = factory.makeASTNode("ProcInvNode");
  Token id;
  ASTNode expressionListNode = null;
}
{
  id = < O_IDENTIFIER > < O_LPAREN >
  {
    ASTNode idRef = factory.makeASTNode("IdRefNode").addLabel(id.image).addLineNumber(id.beginLine);
    ASTNode leftParen = factory.makeASTNode("ParenNode").addLabel("(");
    procedureInvocation.addChild(idRef).addChild(leftParen);
  }
  (
    expressionListNode = expr_list()
    {
      procedureInvocation.addChild(expressionListNode);
    }
  )?
  < O_RPAREN >
  {
    ASTNode rightParen = factory.makeASTNode("ParenNode").addLabel(")");
    procedureInvocation.addChild(rightParen);
    return procedureInvocation;
  }
}

ASTNode i_o_stmt() :
{
  ASTNode io = factory.makeASTNode("IoStmtNode");
  ASTNode idDefinition = null;
  ASTNode expression = null;
  ASTNode stringNode = null;
  ASTNode leftParen = factory.makeASTNode("ParenNode").addLabel("(");
  ASTNode rightParen = factory.makeASTNode("ParenNode").addLabel(")");
  Token tok;
}
{
  (
    tok = < O_READ > < O_LPAREN > idDefinition = variable() < O_RPAREN >
    {
      ASTNode read = factory.makeASTNode("ReadNode").addLabel(tok.image).addLineNumber(tok.beginLine);
      io.addChild(read).addChild(leftParen).addChild(idDefinition).addChild(rightParen);
    }
  | tok = < O_WRITE > < O_LPAREN >
    {
      ASTNode write = factory.makeASTNode("WriteNode").addLabel(tok.image).addLineNumber(tok.beginLine);
    }
    (
      expression = expr()
      {
        io.addChild(write).addChild(leftParen).addChild(expression).addChild(rightParen);
      }
    | stringNode = string()
      {
        io.addChild(write).addChild(leftParen).addChild(stringNode).addChild(rightParen);
      }
    )
    < O_RPAREN >
  )
  {
    return io;
  }
}

ASTNode return_stmt() :
{
  ASTNode expressionNode = null;
  Token tok;
}
{
  tok = < O_RETURN > expressionNode = expr()
  {
    ASTNode returnStatement = factory.makeASTNode("RetStmtNode").addLabel(tok.image).addLineNumber(tok.beginLine);
    returnStatement.addChild(expressionNode);
    return returnStatement;
  }
}

ASTNode case_stmt() :
{
  ASTNode caseStmt = factory.makeASTNode("CaseStmtNode");
  ASTNode expression = null;
  ASTNode cases = null;
  Token tok;
}
{
  tok = < O_CASE > expression = expr() < O_OF >
  {
    caseStmt.addChild(expression).addLineNumber(tok.beginLine);
  }
  (
    cases = cases()
    {
      caseStmt.addChild(cases);
    }
  )?
  < O_END >
  {
    return caseStmt;
  }
}

ASTNode cases() :
{
  ASTNode cases = factory.makeASTNode("CasesNode");
  ASTNode caseElement = null;
}
{
  caseElement = case_element()
  {
    cases.addChild(caseElement);
  }
  (
    < O_SEMICOLON > caseElement = case_element()
    {
      cases.addChild(caseElement);
    }
  )*
  {
    return cases;
  }
}

ASTNode case_element() :
{
  ASTNode caseElement = factory.makeASTNode("CaseElementNode");
  ASTNode caseLabels = null;
  ASTNode statement = null;
}
{
  caseLabels = case_labels() < O_COLON > statement = stmt()
  {
    caseElement.addChild(caseLabels).addChild(statement);
    return caseElement;
  }
}

ASTNode case_labels() :
{
  ASTNode caseLabels = factory.makeASTNode("CaseLabelsNode");
  ASTNode constantNode = null;
  Token constant;
}
{
  (
    constant = < O_INT >
  | constant = < O_FLOATCON >
  )
  {
    constantNode = factory.makeASTNode("ConstantNode").addLabel(constant.image).addLineNumber(constant.beginLine);
    caseLabels.addChild(constantNode);
  }
  (
    < O_COMMA >
    (
      constant = < O_INT >
    | constant = < O_FLOATCON >
    )
    {
      constantNode = factory.makeASTNode("ConstantNode").addLabel(constant.image).addLineNumber(constant.beginLine);
      caseLabels.addChild(constantNode);
    }
  )*
  {
    return caseLabels;
  }
}

ASTNode expr_list() :
{
  ASTNode expressionListNode = factory.makeASTNode("ExpListNode");
  ASTNode expressionNode = null;
}
{
  expressionNode = expr()
  {
    expressionListNode.addChild(expressionNode);
  }
  (
    < O_COMMA > expressionNode = expr()
    {
      expressionListNode.addChild(expressionNode);
    }
  )*
  {
    return expressionListNode;
  }
}

ASTNode expr() :
{
  ASTNode expressionNode = factory.makeASTNode("ExpNode");
  ASTNode factorNode = null;
}
{
  factorNode = term1() factorNode = exprPrime(factorNode)
  {
    expressionNode.addChild(factorNode);
    return expressionNode;
  }
}

ASTNode exprPrime(ASTNode leftFactorNode) :
{
  ASTNode rightFactorNode = null;
}
{
  (
    < O_OR > rightFactorNode = term1()
    {
      ASTNode orNode = factory.makeASTNode("OrNode").addLabel("OR");
      orNode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = exprPrime(orNode)
  | < O_AND > rightFactorNode = term1()
    {
      ASTNode andNode = factory.makeASTNode("AndNode").addLabel("AND");
      andNode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = exprPrime(andNode)
  |
    {}
  )
  {
    return leftFactorNode;
  }
}

ASTNode term1() :
{
  ASTNode factorNode = null;
}
{
  factorNode = term2() factorNode = term1Prime(factorNode)
  {
    return factorNode;
  }
}

ASTNode term1Prime(ASTNode leftFactorNode) :
{
  ASTNode rightFactorNode = null;
}
{
  (
    < O_LT > rightFactorNode = term2()
    {
      ASTNode lTNode = factory.makeASTNode("LTNode").addLabel("<");
      lTNode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = term1Prime(lTNode)
  | < O_LE > rightFactorNode = term2()
    {
      ASTNode lENode = factory.makeASTNode("LENode").addLabel("<=");
      lENode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = term1Prime(lENode)
  | < O_GT > rightFactorNode = term2()
    {
      ASTNode gTNode = factory.makeASTNode("GTNode").addLabel(">");
      gTNode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = term1Prime(gTNode)
  | < O_GE > rightFactorNode = term2()
    {
      ASTNode gENode = factory.makeASTNode("GENode").addLabel(">=");
      gENode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = term1Prime(gENode)
  | < O_NE > rightFactorNode = term2()
    {
      ASTNode nENode = factory.makeASTNode("NENode").addLabel("<>");
      nENode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = term1Prime(nENode)
  | < O_EQ > rightFactorNode = term2()
    {
      ASTNode eQNode = factory.makeASTNode("EQNode").addLabel("=");
      eQNode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = term1Prime(eQNode)
  |
    {}
  )
  {
    return leftFactorNode;
  }
}

ASTNode term2() :
{
  ASTNode factorNode = null;
}
{
  factorNode = term3() factorNode = term2Prime(factorNode)
  {
    return factorNode;
  }
}

ASTNode term2Prime(ASTNode leftFactorNode) :
{
  ASTNode rightFactorNode = null;
}
{
  (
    < O_PLUS > rightFactorNode = term3()
    {
      ASTNode addNode = factory.makeASTNode("AddNode").addLabel("+");
      addNode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = term2Prime(addNode)
  | < O_MINUS > rightFactorNode = term3()
    {
      ASTNode subNode = factory.makeASTNode("SubNode").addLabel("-");
      subNode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = term2Prime(subNode)
  |
    {}
  )
  {
    return leftFactorNode;
  }
}

ASTNode term3() :
{
  ASTNode factorNode = null;
}
{
  factorNode = factor() factorNode = term3Prime(factorNode)
  {
    return factorNode;
  }
}

ASTNode term3Prime(ASTNode leftFactorNode) :
{
  ASTNode rightFactorNode = null;
}
{
  (
    < O_TIMES > rightFactorNode = factor()
    {
      ASTNode multiplicationNode = factory.makeASTNode("MulNode").addLabel("*");
      multiplicationNode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = term3Prime(multiplicationNode)
  | 
    < O_MOD > rightFactorNode = factor()
    {
      ASTNode modNode = factory.makeASTNode("ModNode").addLabel("MOD");
      modNode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = term3Prime(modNode)
  |
    {}
  )
  {
    return leftFactorNode;
  }
}

ASTNode factor() :
{
  ASTNode factorNode = factory.makeASTNode("FactorNode");
  Token id;
  Token constant;
  ASTNode constantNode = null;
  ASTNode expressionNode = null;
  ASTNode secondFactorNode = null;
  ASTNode expressionListNode = null;
  ASTNode leftParen = null;
  ASTNode rightParen = null;
}
{
  (
    id = < O_IDENTIFIER >
    {
      ASTNode idReference = factory.makeASTNode("IdRefNode").addLabel(id.image).addLineNumber(id.beginLine);
      factorNode.addChild(idReference);
    }
    (
      < O_LBRACKET > expressionNode = expr() < O_RBRACKET >
      {
        ASTNode leftBracket = factory.makeASTNode("BracketNode").addLabel("[");
        ASTNode rightBracket = factory.makeASTNode("BracketNode").addLabel("]");
        factorNode.addChild(leftBracket).addChild(expressionNode).addChild(rightBracket);
      }
    | < O_LPAREN >
      {
        leftParen = factory.makeASTNode("ParenNode").addLabel("(");
        factorNode.addChild(leftParen);
      }
      (
        expressionListNode = expr_list()
        {
          factorNode.addChild(expressionListNode);
        }
      )?
      < O_RPAREN >
      {
        rightParen = factory.makeASTNode("ParenNode").addLabel(")");
        factorNode.addChild(rightParen);
      }
    )?
  | constant = < O_INT >
    {
      constantNode = factory.makeASTNode("ConstantNode").addLabel(constant.image);
      factorNode.addChild(constantNode);
    }
  | constant = < O_FLOATCON >
    {
      constantNode = factory.makeASTNode("ConstantNode").addLabel(constant.image);
      factorNode.addChild(constantNode);
    }
  | constant = < O_CHAR >
    {
      constantNode = factory.makeASTNode("ConstantNode").addLabel(constant.image);
      factorNode.addChild(constantNode);
    }
  | < O_LPAREN > expressionNode = expr() < O_RPAREN >
    {
      leftParen = factory.makeASTNode("ParenNode").addLabel("(");
      rightParen = factory.makeASTNode("ParenNode").addLabel(")");
      factorNode.addChild(leftParen).addChild(expressionNode).addChild(rightParen);
    }
  | < O_NOT > secondFactorNode = factor()
    {
      ASTNode not = factory.makeASTNode("NotNode").addLabel("NOT");
      factorNode.addChild(not).addChild(secondFactorNode);
    }
  )
  {
    return factorNode;
  }
}

ASTNode variable() :
{
  ASTNode idDefinitionNode = factory.makeASTNode("IdDefNode");
  Token id;
  ASTNode expressionNode = null;
}
{
  id = < O_IDENTIFIER >
  {
    idDefinitionNode.addLabel(id.image).addLineNumber(id.beginLine);
  }
  (
    < O_LBRACKET > expressionNode = expr() < O_RBRACKET >
    {
      ASTNode leftBracket = factory.makeASTNode("BracketNode").addLabel("[");
      ASTNode rightBracket = factory.makeASTNode("BracketNode").addLabel("]");
      idDefinitionNode.addChild(leftBracket).addChild(expressionNode).addChild(rightBracket);
    }
  )?
  {
    return idDefinitionNode;
  }
}

ASTNode string() :
{
  ASTNode stringNode = factory.makeASTNode("StringNode");
  Token text;
}
{
  text = < O_STRING >
  {
    stringNode.addLabel(text.image);
    return stringNode;
  }
}
