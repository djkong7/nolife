/* Generated By:JavaCC: Do not edit this line. NolifeParser.java */
package parser;
import ast.*;
import visitor.*;

public class NolifeParser implements NolifeParserConstants {
  private static ASTNodeFactory factory = new ASTNodeFactory();

  static final public ASTNode program() throws ParseException {
  ASTNode programNode = factory.makeASTNode("ProgramNode");
  Token programName;
  ASTNode declarationsNode = null;
  ASTNode subProgramDeclaration = null;
  ASTNode compoundStatement = null;
    jj_consume_token(O_PROGRAM);
    programName = jj_consume_token(O_IDENTIFIER);
    jj_consume_token(O_SEMICOLON);
    programNode.addLabel(programName.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_VAR:
      declarationsNode = decls();
      programNode.addChild(declarationsNode);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_FUNCTION:
    case O_PROCEDURE:
      subProgramDeclaration = subprogram_decls();
      programNode.addChild(subProgramDeclaration);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    compoundStatement = compound_stmt();
    programNode.addChild(compoundStatement);
    {if (true) return programNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode decls() throws ParseException {
  ASTNode declarations = factory.makeASTNode("DeclNode");
  ASTNode declarationsList = null;
    jj_consume_token(O_VAR);
    declarationsList = decl_list();
    declarations.addChild(declarationsList);
    {if (true) return declarations;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode decl_list() throws ParseException {
  ASTNode declarationsList = factory.makeASTNode("DeclListNode");
  ASTNode idList = null;
  ASTNode typeNode = null;
    label_1:
    while (true) {
      idList = identifier_list();
      jj_consume_token(O_COLON);
      typeNode = type();
      jj_consume_token(O_SEMICOLON);
      declarationsList.addChild(idList).addChild(typeNode);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    {if (true) return declarationsList;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode identifier_list() throws ParseException {
  Token variableName;
  ASTNode variableNode = null;
  ASTNode idList = factory.makeASTNode("IdListNode");
    variableName = jj_consume_token(O_IDENTIFIER);
    variableNode = factory.makeASTNode("IdDeclNode").addLabel(variableName.image).addLineNumber(variableName.beginLine);
    idList.addChild(variableNode);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(O_COMMA);
      variableName = jj_consume_token(O_IDENTIFIER);
      variableNode = factory.makeASTNode("IdDeclNode").addLabel(variableName.image).addLineNumber(variableName.beginLine);
      idList.addChild(variableNode);
    }
    {if (true) return idList;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode type() throws ParseException {
  ASTNode typeNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_CHARACTER:
    case O_FLOAT:
    case O_INTEGER:
      typeNode = standard_type();
      break;
    case O_ARRAY:
      typeNode = array_type();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return typeNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode standard_type() throws ParseException {
  ASTNode typeNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_INTEGER:
      jj_consume_token(O_INTEGER);
      typeNode = factory.makeASTNode("IntTypeNode").addLabel("INTEGER");
      break;
    case O_FLOAT:
      jj_consume_token(O_FLOAT);
      typeNode = factory.makeASTNode("FloatTypeNode").addLabel("FLOAT");
      break;
    case O_CHARACTER:
      jj_consume_token(O_CHARACTER);
      typeNode = factory.makeASTNode("CharTypeNode").addLabel("CHARACTER");
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return typeNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode array_type() throws ParseException {
  ASTNode arrayNode = factory.makeASTNode("ArrayTypeNode").addLabel("ARRAY");
  ASTNode typeNode = null;
  ASTNode dimensions = null;
  ASTNode leftBracket = factory.makeASTNode("BracketNode").addLabel("[");
  ASTNode rightBracket = factory.makeASTNode("BracketNode").addLabel("]");
    jj_consume_token(O_ARRAY);
    jj_consume_token(O_LBRACKET);
    dimensions = dim();
    jj_consume_token(O_RBRACKET);
    jj_consume_token(O_OF);
    typeNode = standard_type();
    arrayNode.addChild(leftBracket).addChild(dimensions).addChild(rightBracket).addChild(typeNode);
    {if (true) return arrayNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode dim() throws ParseException {
  ASTNode dimensions = factory.makeASTNode("DimNode");
  Token minValue;
  Token maxValue;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_INT:
      minValue = jj_consume_token(O_INT);
      jj_consume_token(O_DOT);
      jj_consume_token(O_DOT);
      maxValue = jj_consume_token(O_INT);
      break;
    case O_CHAR:
      minValue = jj_consume_token(O_CHAR);
      jj_consume_token(O_DOT);
      jj_consume_token(O_DOT);
      maxValue = jj_consume_token(O_CHAR);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    ASTNode minDimNode = factory.makeASTNode("MinDimNode").addLabel(minValue.image);
    ASTNode maxDimNode = factory.makeASTNode("MaxDimNode").addLabel(maxValue.image);
    dimensions.addChild(minDimNode).addChild(maxDimNode);
    {if (true) return dimensions;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode subprogram_decls() throws ParseException {
  ASTNode subProgramDeclaration = factory.makeASTNode("SubProgDeclNode");
  ASTNode subProgram = null;
    label_3:
    while (true) {
      subProgram = subprogram_decl();
      jj_consume_token(O_SEMICOLON);
      subProgramDeclaration.addChild(subProgram);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_FUNCTION:
      case O_PROCEDURE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
    }
    {if (true) return subProgramDeclaration;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode subprogram_decl() throws ParseException {
  ASTNode subProgram = factory.makeASTNode("SubProgNode");
  ASTNode subProgramHead = null;
  ASTNode compoundStatement = null;
  ASTNode declarationsNode = null;
    subProgramHead = subprogram_head();
    subProgram.addChild(subProgramHead);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_VAR:
      declarationsNode = decls();
      subProgram.addChild(declarationsNode);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    compoundStatement = compound_stmt();
    subProgram.addChild(compoundStatement);
    {if (true) return subProgram;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode subprogram_head() throws ParseException {
  ASTNode subProgramHead = factory.makeASTNode("SubProgHeadNode");
  Token type;
  Token id;
  ASTNode argumentsNode = null;
  ASTNode subProgramType = null;
  ASTNode funcDec = null;
  ASTNode typeNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_FUNCTION:
      type = jj_consume_token(O_FUNCTION);
      id = jj_consume_token(O_IDENTIFIER);
      subProgramType = factory.makeASTNode("SubProgTypeNode").addLabel(type.image);
      funcDec = factory.makeASTNode("IdDeclNode").addLabel(id.image).addLineNumber(id.beginLine);
      subProgramHead.addChild(subProgramType).addChild(funcDec);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_LPAREN:
        argumentsNode = arguments();
        subProgramHead.addChild(argumentsNode);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(O_COLON);
      typeNode = standard_type();
      jj_consume_token(O_SEMICOLON);
      subProgramHead.addChild(typeNode);
      break;
    case O_PROCEDURE:
      type = jj_consume_token(O_PROCEDURE);
      id = jj_consume_token(O_IDENTIFIER);
      subProgramType = factory.makeASTNode("SubProgTypeNode").addLabel(type.image);
      funcDec = factory.makeASTNode("IdDeclNode").addLabel(id.image).addLineNumber(id.beginLine);
      subProgramHead.addChild(subProgramType).addChild(funcDec);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_LPAREN:
        argumentsNode = arguments();
        subProgramHead.addChild(argumentsNode);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return subProgramHead;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode arguments() throws ParseException {
  ASTNode argumentsNode = factory.makeASTNode("ArgsNode");
  ASTNode parameterList = null;
    jj_consume_token(O_LPAREN);
    parameterList = parameter_list();
    jj_consume_token(O_RPAREN);
    ASTNode leftParen = factory.makeASTNode("ParenNode").addLabel("(");
    ASTNode rightParen = factory.makeASTNode("ParenNode").addLabel(")");
    argumentsNode.addChild(leftParen).addChild(parameterList).addChild(rightParen);
    {if (true) return argumentsNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode parameter_list() throws ParseException {
  ASTNode parameterListNode = factory.makeASTNode("ParamListNode");
  ASTNode idList = null;
  ASTNode typeNode = null;
    idList = identifier_list();
    jj_consume_token(O_COLON);
    typeNode = type();
    parameterListNode.addChild(idList).addChild(typeNode);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_SEMICOLON:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(O_SEMICOLON);
      idList = identifier_list();
      jj_consume_token(O_COLON);
      typeNode = type();
      parameterListNode.addChild(idList).addChild(typeNode);
    }
    {if (true) return parameterListNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode compound_stmt() throws ParseException {
  ASTNode compoundStatement = factory.makeASTNode("CmpStmtNode");
  ASTNode statementList = null;
    jj_consume_token(O_BEGIN);
    statementList = stmt_list();
    jj_consume_token(O_END);
    {if (true) return compoundStatement.addChild(statementList);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode stmt_list() throws ParseException {
  ASTNode statementList = factory.makeASTNode("StmtListNode");
  ASTNode statement = null;
    statement = stmt();
    statementList.addChild(statement);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_SEMICOLON:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(O_SEMICOLON);
      statement = stmt();
      statementList.addChild(statement);
    }
    {if (true) return statementList;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode stmt() throws ParseException {
  ASTNode statement = null;
    if (jj_2_1(2)) {
      statement = assignment();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_IF:
        statement = if_stmt();
        break;
      case O_WHILE:
        statement = while_stmt();
        break;
      case O_IDENTIFIER:
        statement = procedure_invocation();
        break;
      case O_READ:
      case O_WRITE:
        statement = i_o_stmt();
        break;
      case O_BEGIN:
        statement = compound_stmt();
        break;
      case O_RETURN:
        statement = return_stmt();
        break;
      case O_CASE:
        statement = case_stmt();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode assignment() throws ParseException {
  ASTNode assignment = factory.makeASTNode("AssignmentNode").addLabel(":=");
  ASTNode idDefinitionNode = null;
  ASTNode expressionNode = null;
    idDefinitionNode = variable();
    jj_consume_token(O_ASSIGN);
    expressionNode = expr();
    assignment.addChild(idDefinitionNode).addChild(expressionNode);
    {if (true) return assignment;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode if_stmt() throws ParseException {
  ASTNode ifStmt = factory.makeASTNode("IfStmtNode");
  ASTNode expressionNode = null;
  ASTNode statement = null;
    jj_consume_token(O_IF);
    expressionNode = expr();
    jj_consume_token(O_THEN);
    statement = stmt();
    ifStmt.addChild(expressionNode).addChild(statement);
    if (jj_2_2(2147483647)) {
      jj_consume_token(O_ELSE);
      statement = stmt();
      ifStmt.addChild(statement);
    } else {
      ;
    }
    {if (true) return ifStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode while_stmt() throws ParseException {
  ASTNode whileStmt = factory.makeASTNode("WhileStmtNode");
  ASTNode expressionNode = null;
  ASTNode statement = null;
    jj_consume_token(O_WHILE);
    expressionNode = expr();
    jj_consume_token(O_DO);
    statement = stmt();
    whileStmt.addChild(expressionNode).addChild(statement);
    {if (true) return whileStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode procedure_invocation() throws ParseException {
  ASTNode procedureInvocation = factory.makeASTNode("ProcInvNode");
  Token id;
  ASTNode expressionListNode = null;
    id = jj_consume_token(O_IDENTIFIER);
    jj_consume_token(O_LPAREN);
    ASTNode idRef = factory.makeASTNode("IdRefNode").addLabel(id.image).addLineNumber(id.beginLine);
    ASTNode leftParen = factory.makeASTNode("ParenNode").addLabel("(");
    procedureInvocation.addChild(idRef).addChild(leftParen);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_NOT:
    case O_LPAREN:
    case O_CHAR:
    case O_IDENTIFIER:
    case O_FLOATCON:
    case O_INT:
      expressionListNode = expr_list();
      procedureInvocation.addChild(expressionListNode);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(O_RPAREN);
    ASTNode rightParen = factory.makeASTNode("ParenNode").addLabel(")");
    procedureInvocation.addChild(rightParen);
    {if (true) return procedureInvocation;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode i_o_stmt() throws ParseException {
  ASTNode io = factory.makeASTNode("IoStmtNode");
  ASTNode idDefinition = null;
  ASTNode expression = null;
  ASTNode stringNode = null;
  ASTNode leftParen = factory.makeASTNode("ParenNode").addLabel("(");
  ASTNode rightParen = factory.makeASTNode("ParenNode").addLabel(")");
  Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_READ:
      tok = jj_consume_token(O_READ);
      jj_consume_token(O_LPAREN);
      idDefinition = variable();
      jj_consume_token(O_RPAREN);
      ASTNode read = factory.makeASTNode("ReadNode").addLabel(tok.image).addLineNumber(tok.beginLine);
      io.addChild(read).addChild(leftParen).addChild(idDefinition).addChild(rightParen);
      break;
    case O_WRITE:
      tok = jj_consume_token(O_WRITE);
      jj_consume_token(O_LPAREN);
      ASTNode write = factory.makeASTNode("WriteNode").addLabel(tok.image).addLineNumber(tok.beginLine);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_NOT:
      case O_LPAREN:
      case O_CHAR:
      case O_IDENTIFIER:
      case O_FLOATCON:
      case O_INT:
        expression = expr();
        io.addChild(write).addChild(leftParen).addChild(expression).addChild(rightParen);
        break;
      case O_STRING:
        stringNode = string();
        io.addChild(write).addChild(leftParen).addChild(stringNode).addChild(rightParen);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(O_RPAREN);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return io;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode return_stmt() throws ParseException {
  ASTNode expressionNode = null;
  Token tok;
    tok = jj_consume_token(O_RETURN);
    expressionNode = expr();
    ASTNode returnStatement = factory.makeASTNode("RetStmtNode").addLabel(tok.image).addLineNumber(tok.beginLine);
    returnStatement.addChild(expressionNode);
    {if (true) return returnStatement;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode case_stmt() throws ParseException {
  ASTNode caseStmt = factory.makeASTNode("CaseStmtNode");
  ASTNode expression = null;
  ASTNode cases = null;
  Token tok;
    tok = jj_consume_token(O_CASE);
    expression = expr();
    jj_consume_token(O_OF);
    caseStmt.addChild(expression).addLineNumber(tok.beginLine);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_FLOATCON:
    case O_INT:
      cases = cases();
      caseStmt.addChild(cases);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(O_END);
    {if (true) return caseStmt;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode cases() throws ParseException {
  ASTNode cases = factory.makeASTNode("CasesNode");
  ASTNode caseElement = null;
    caseElement = case_element();
    cases.addChild(caseElement);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_SEMICOLON:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      jj_consume_token(O_SEMICOLON);
      caseElement = case_element();
      cases.addChild(caseElement);
    }
    {if (true) return cases;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode case_element() throws ParseException {
  ASTNode caseElement = factory.makeASTNode("CaseElementNode");
  ASTNode caseLabels = null;
  ASTNode statement = null;
    caseLabels = case_labels();
    jj_consume_token(O_COLON);
    statement = stmt();
    caseElement.addChild(caseLabels).addChild(statement);
    {if (true) return caseElement;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode case_labels() throws ParseException {
  ASTNode caseLabels = factory.makeASTNode("CaseLabelsNode");
  ASTNode constantNode = null;
  Token constant;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_INT:
      constant = jj_consume_token(O_INT);
      break;
    case O_FLOATCON:
      constant = jj_consume_token(O_FLOATCON);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    constantNode = factory.makeASTNode("ConstantNode").addLabel(constant.image).addLineNumber(constant.beginLine);
    caseLabels.addChild(constantNode);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      jj_consume_token(O_COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_INT:
        constant = jj_consume_token(O_INT);
        break;
      case O_FLOATCON:
        constant = jj_consume_token(O_FLOATCON);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      constantNode = factory.makeASTNode("ConstantNode").addLabel(constant.image).addLineNumber(constant.beginLine);
      caseLabels.addChild(constantNode);
    }
    {if (true) return caseLabels;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode expr_list() throws ParseException {
  ASTNode expressionListNode = factory.makeASTNode("ExpListNode");
  ASTNode expressionNode = null;
    expressionNode = expr();
    expressionListNode.addChild(expressionNode);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      jj_consume_token(O_COMMA);
      expressionNode = expr();
      expressionListNode.addChild(expressionNode);
    }
    {if (true) return expressionListNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode expr() throws ParseException {
  ASTNode expressionNode = factory.makeASTNode("ExpNode");
  ASTNode factorNode = null;
    factorNode = term1();
    factorNode = exprPrime(factorNode);
    expressionNode.addChild(factorNode);
    {if (true) return expressionNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode exprPrime(ASTNode leftFactorNode) throws ParseException {
  ASTNode rightFactorNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_OR:
      jj_consume_token(O_OR);
      rightFactorNode = term1();
      ASTNode orNode = factory.makeASTNode("OrNode").addLabel("OR");
      orNode.addChild(leftFactorNode).addChild(rightFactorNode);
      leftFactorNode = exprPrime(orNode);
      break;
    case O_AND:
      jj_consume_token(O_AND);
      rightFactorNode = term1();
      ASTNode andNode = factory.makeASTNode("AndNode").addLabel("AND");
      andNode.addChild(leftFactorNode).addChild(rightFactorNode);
      leftFactorNode = exprPrime(andNode);
      break;
    default:
      jj_la1[24] = jj_gen;

    }
    {if (true) return leftFactorNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode term1() throws ParseException {
  ASTNode factorNode = null;
    factorNode = term2();
    factorNode = term1Prime(factorNode);
    {if (true) return factorNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode term1Prime(ASTNode leftFactorNode) throws ParseException {
  ASTNode rightFactorNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_LT:
      jj_consume_token(O_LT);
      rightFactorNode = term2();
      ASTNode lTNode = factory.makeASTNode("LTNode").addLabel("<");
      lTNode.addChild(leftFactorNode).addChild(rightFactorNode);
      leftFactorNode = term1Prime(lTNode);
      break;
    case O_LE:
      jj_consume_token(O_LE);
      rightFactorNode = term2();
      ASTNode lENode = factory.makeASTNode("LENode").addLabel("<=");
      lENode.addChild(leftFactorNode).addChild(rightFactorNode);
      leftFactorNode = term1Prime(lENode);
      break;
    case O_GT:
      jj_consume_token(O_GT);
      rightFactorNode = term2();
      ASTNode gTNode = factory.makeASTNode("GTNode").addLabel(">");
      gTNode.addChild(leftFactorNode).addChild(rightFactorNode);
      leftFactorNode = term1Prime(gTNode);
      break;
    case O_GE:
      jj_consume_token(O_GE);
      rightFactorNode = term2();
      ASTNode gENode = factory.makeASTNode("GENode").addLabel(">=");
      gENode.addChild(leftFactorNode).addChild(rightFactorNode);
      leftFactorNode = term1Prime(gENode);
      break;
    case O_NE:
      jj_consume_token(O_NE);
      rightFactorNode = term2();
      ASTNode nENode = factory.makeASTNode("NENode").addLabel("<>");
      nENode.addChild(leftFactorNode).addChild(rightFactorNode);
      leftFactorNode = term1Prime(nENode);
      break;
    case O_EQ:
      jj_consume_token(O_EQ);
      rightFactorNode = term2();
      ASTNode eQNode = factory.makeASTNode("EQNode").addLabel("=");
      eQNode.addChild(leftFactorNode).addChild(rightFactorNode);
      leftFactorNode = term1Prime(eQNode);
      break;
    default:
      jj_la1[25] = jj_gen;

    }
    {if (true) return leftFactorNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode term2() throws ParseException {
  ASTNode factorNode = null;
    factorNode = term3();
    factorNode = term2Prime(factorNode);
    {if (true) return factorNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode term2Prime(ASTNode leftFactorNode) throws ParseException {
  ASTNode rightFactorNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_PLUS:
      jj_consume_token(O_PLUS);
      rightFactorNode = term3();
      ASTNode addNode = factory.makeASTNode("AddNode").addLabel("+");
      addNode.addChild(leftFactorNode).addChild(rightFactorNode);
      leftFactorNode = term2Prime(addNode);
      break;
    case O_MINUS:
      jj_consume_token(O_MINUS);
      rightFactorNode = term3();
      ASTNode subNode = factory.makeASTNode("SubNode").addLabel("-");
      subNode.addChild(leftFactorNode).addChild(rightFactorNode);
      leftFactorNode = term2Prime(subNode);
      break;
    default:
      jj_la1[26] = jj_gen;

    }
    {if (true) return leftFactorNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode term3() throws ParseException {
  ASTNode factorNode = null;
    factorNode = factor();
    factorNode = term3Prime(factorNode);
    {if (true) return factorNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode term3Prime(ASTNode leftFactorNode) throws ParseException {
  ASTNode rightFactorNode = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_TIMES:
      jj_consume_token(O_TIMES);
      rightFactorNode = factor();
      ASTNode multiplicationNode = factory.makeASTNode("MulNode").addLabel("*");
      multiplicationNode.addChild(leftFactorNode).addChild(rightFactorNode);
      leftFactorNode = term3Prime(multiplicationNode);
      break;
    case O_MOD:
      jj_consume_token(O_MOD);
      rightFactorNode = factor();
      ASTNode modNode = factory.makeASTNode("ModNode").addLabel("MOD");
      modNode.addChild(leftFactorNode).addChild(rightFactorNode);
      leftFactorNode = term3Prime(modNode);
      break;
    default:
      jj_la1[27] = jj_gen;

    }
    {if (true) return leftFactorNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode factor() throws ParseException {
  ASTNode factorNode = factory.makeASTNode("FactorNode");
  Token id;
  Token constant;
  ASTNode constantNode = null;
  ASTNode expressionNode = null;
  ASTNode secondFactorNode = null;
  ASTNode expressionListNode = null;
  ASTNode leftParen = null;
  ASTNode rightParen = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_IDENTIFIER:
      id = jj_consume_token(O_IDENTIFIER);
      ASTNode idReference = factory.makeASTNode("IdRefNode").addLabel(id.image).addLineNumber(id.beginLine);
      factorNode.addChild(idReference);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_LBRACKET:
      case O_LPAREN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case O_LBRACKET:
          jj_consume_token(O_LBRACKET);
          expressionNode = expr();
          jj_consume_token(O_RBRACKET);
        ASTNode leftBracket = factory.makeASTNode("BracketNode").addLabel("[");
        ASTNode rightBracket = factory.makeASTNode("BracketNode").addLabel("]");
        factorNode.addChild(leftBracket).addChild(expressionNode).addChild(rightBracket);
          break;
        case O_LPAREN:
          jj_consume_token(O_LPAREN);
        leftParen = factory.makeASTNode("ParenNode").addLabel("(");
        factorNode.addChild(leftParen);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case O_NOT:
          case O_LPAREN:
          case O_CHAR:
          case O_IDENTIFIER:
          case O_FLOATCON:
          case O_INT:
            expressionListNode = expr_list();
          factorNode.addChild(expressionListNode);
            break;
          default:
            jj_la1[28] = jj_gen;
            ;
          }
          jj_consume_token(O_RPAREN);
        rightParen = factory.makeASTNode("ParenNode").addLabel(")");
        factorNode.addChild(rightParen);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      break;
    case O_INT:
      constant = jj_consume_token(O_INT);
      constantNode = factory.makeASTNode("ConstantNode").addLabel(constant.image);
      factorNode.addChild(constantNode);
      break;
    case O_FLOATCON:
      constant = jj_consume_token(O_FLOATCON);
      constantNode = factory.makeASTNode("ConstantNode").addLabel(constant.image);
      factorNode.addChild(constantNode);
      break;
    case O_CHAR:
      constant = jj_consume_token(O_CHAR);
      constantNode = factory.makeASTNode("ConstantNode").addLabel(constant.image);
      factorNode.addChild(constantNode);
      break;
    case O_LPAREN:
      jj_consume_token(O_LPAREN);
      expressionNode = expr();
      jj_consume_token(O_RPAREN);
      leftParen = factory.makeASTNode("ParenNode").addLabel("(");
      rightParen = factory.makeASTNode("ParenNode").addLabel(")");
      factorNode.addChild(leftParen).addChild(expressionNode).addChild(rightParen);
      break;
    case O_NOT:
      jj_consume_token(O_NOT);
      secondFactorNode = factor();
      ASTNode not = factory.makeASTNode("NotNode").addLabel("NOT");
      factorNode.addChild(not).addChild(secondFactorNode);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return factorNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode variable() throws ParseException {
  ASTNode idDefinitionNode = factory.makeASTNode("IdDefNode");
  Token id;
  ASTNode expressionNode = null;
    id = jj_consume_token(O_IDENTIFIER);
    idDefinitionNode.addLabel(id.image).addLineNumber(id.beginLine);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_LBRACKET:
      jj_consume_token(O_LBRACKET);
      expressionNode = expr();
      jj_consume_token(O_RBRACKET);
      ASTNode leftBracket = factory.makeASTNode("BracketNode").addLabel("[");
      ASTNode rightBracket = factory.makeASTNode("BracketNode").addLabel("]");
      idDefinitionNode.addChild(leftBracket).addChild(expressionNode).addChild(rightBracket);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    {if (true) return idDefinitionNode;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode string() throws ParseException {
  ASTNode stringNode = factory.makeASTNode("StringNode");
  Token text;
    text = jj_consume_token(O_STRING);
    stringNode.addLabel(text.image);
    {if (true) return stringNode;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(O_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(O_LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(O_ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(O_ELSE)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public NolifeParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000000,0x208000,0x0,0x0,0x24500,0x24400,0x0,0x208000,0x4000000,0x0,0x0,0x208000,0x0,0x0,0x39810200,0x40000,0x40000,0x10800000,0x0,0x0,0x0,0x0,0x0,0x0,0x100080,0xc0000000,0x0,0x40,0x40000,0x0,0x0,0x40000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x100000,0x80,0x0,0x0,0x810000,0x0,0x0,0x400,0x400,0x0,0x40,0x40,0x100000,0xd10400,0xd30400,0x0,0xc00000,0x40,0xc00000,0x80,0xc00000,0x80,0x0,0xf,0x6000,0x8000,0xd10400,0x500,0x500,0xd10400,0x100,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public NolifeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NolifeParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NolifeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public NolifeParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NolifeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public NolifeParser(NolifeParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(NolifeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
