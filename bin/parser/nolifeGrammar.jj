/**
 * JavaCC file
 */

options
{
  JDK_VERSION = "1.8";
}

PARSER_BEGIN(NolifeParser)
package parser;
import ast.*;
import visitor.*;

public class NolifeParser
{
  private static ASTNodeFactory factory = new ASTNodeFactory();
}

PARSER_END(NolifeParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| < "{" (~[ "}" ])* "}" >
}

TOKEN : /* keywords */
{
  < O_MOD : "MOD" >
| < O_AND : "AND" >
| < O_ARRAY : "ARRAY" >
| < O_BEGIN : "BEGIN" >
| < O_CHARACTER : "CHARACTER" >
| < O_DO : "DO" >
| < O_ELSE : "ELSE" >
| < O_END : "END" >
| < O_FLOAT : "FLOAT" >
| < O_FUNCTION : "FUNCTION" >
| < O_IF : "IF" >
| < O_INTEGER : "INTEGER" >
| < O_NOT : "NOT" >
| < O_OF : "OF" >
| < O_OR : "OR" >
| < O_PROCEDURE : "PROCEDURE" >
| < O_PROGRAM : "PROGRAM" >
| < O_READ : "READ" >
| < O_RETURN : "RETURN" >
| < O_THEN : "THEN" >
| < O_VAR : "VAR" >
| < O_WHILE : "WHILE" >
| < O_WRITE : "WRITE" >
| < O_CASE : "CASE" >
}

TOKEN : /* other lexical tokens */
{
  < O_LE : "<=" >
| < O_LT : "<" >
| < O_GE : ">=" >
| < O_GT : ">" >
| < O_EQ : "=" >
| < O_NE : "<>" >
| < O_ASSIGN : ":=" >
| < O_COLON : ":" >
| < O_SEMICOLON : ";" >
| < O_COMMA : "," >
| < O_LBRACKET : "[" >
| < O_RBRACKET : "]" >
| < O_LPAREN : "(" >
| < O_RPAREN : ")" >
| < O_DOT : "." >
| < O_PLUS : "+" >
| < O_MINUS : "-" >
| < O_TIMES : "*" >
| < O_CHAR : "'" ~[ "'" ] "'" >
| < O_STRING : "'" ~[ "'" ] (~[ "'" ])+ "'" >
| < #DIGIT : [ "0"-"9" ] >
| < #ALPHA :
    [ "a"-"z" ]
  | [ "A"-"Z" ] >
| < O_IDENTIFIER :
    < ALPHA >
    (
      < ALPHA >
    | < DIGIT >
    )* >
| < #EXPONENT :
    (
      "e"
    | "E"
    )
    (
      "+"
    | "-"
    )?
    (< DIGIT >)+ >
| < O_FLOATCON :
    < O_INT >
    (
      < O_DOT > (< DIGIT >)+ (< EXPONENT >)?
    | < EXPONENT >
    ) >
| < O_INT :
    "0"
  | [ "1"-"9" ] (< DIGIT >)* >
}

ASTNode program() :
{
  ASTNode programNode = factory.makeASTNode("ProgramNode");
  Token programName;
  ASTNode declarationsNode = null;
  ASTNode compoundStatement = null;
}
{
  < O_PROGRAM > programName = < O_IDENTIFIER > < O_SEMICOLON >
  {
    programNode.addLabel(programName.image);
  }
  (
    declarationsNode = decls()
  )?
  {
    programNode.addChild(declarationsNode);
  }
  (
    subprogram_decls()
  )?
  compoundStatement = compound_stmt()
  {
    programNode.addChild(compoundStatement);
  }
  {
    return programNode;
  }
}

ASTNode decls() :
{
  ASTNode declarationsNode = null;
}
{
  < O_VAR > declarationsNode = decl_list()
  {
    return declarationsNode;
  }
}

ASTNode decl_list() :
{
  ASTNode variableDeclarationNode = null;
  ASTNode typeNode = null;
  ASTNode declarationsNode = factory.makeASTNode("DeclNode");
}
{
  (
    variableDeclarationNode = identifier_list() < O_COLON > typeNode = type() < O_SEMICOLON >
    {
      variableDeclarationNode.addChild(typeNode);
      //System.out.println(declarationsNode.toString());
      declarationsNode.addChild(variableDeclarationNode);
    }
  )+
  {
    return declarationsNode;
  }
}

ASTNode identifier_list() :
{
  Token variableName;
  ASTNode variableNode = null;
  ASTNode variableDeclarationNode = factory.makeASTNode("VarDeclNode");
}
{
  variableName = < O_IDENTIFIER >
  {
    variableNode = factory.makeASTNode("IdDeclNode").addLabel(variableName.image);
    variableDeclarationNode.addChild(variableNode);
  }
  (
    < O_COMMA > variableName = < O_IDENTIFIER >
    {
      variableNode = factory.makeASTNode("IdDeclNode").addLabel(variableName.image);
      variableDeclarationNode.addChild(variableNode);
    }
  )*
  {
    return variableDeclarationNode;
  }
}

ASTNode type() :
{
  ASTNode typeNode = null;
}
{
  (
    typeNode = standard_type()
  | 
    typeNode = array_type()
  )
  {
    return typeNode;
  }
}

ASTNode standard_type() :
{
  ASTNode typeNode = null;
}
{
  (
    < O_INTEGER >
    {
      typeNode = factory.makeASTNode("IntTypeNode").addLabel("INTEGER");
    }
  | < O_FLOAT >
    {
      typeNode = factory.makeASTNode("FloatTypeNode").addLabel("FLOAT");
    }
  | < O_CHARACTER >
    {
      typeNode = factory.makeASTNode("CharTypeNode").addLabel("CHARACTER");
    }
  )
  {
    return typeNode;
  }
}

ASTNode array_type() :
{
  ASTNode arrayNode = null;
  ASTNode typeNode = null;
}
{
  < O_ARRAY > < O_LBRACKET > arrayNode = dim() < O_RBRACKET > < O_OF > typeNode = standard_type()
  {
    arrayNode.addChild(typeNode);
    return arrayNode;
  }
}

ASTNode dim() :
{
  ASTNode arrayNode = factory.makeASTNode("ArrayTypeNode");
  Token minValue;
  Token maxValue;
}
{
  (
    minValue = < O_INT > < O_DOT > < O_DOT > maxValue = < O_INT >
  | minValue = < O_CHAR > < O_DOT > < O_DOT > maxValue = < O_CHAR >
  )
  {
    ASTNode minArrayNode = factory.makeASTNode("MinArrayNode").addLabel(minValue.image);
    ASTNode maxArrayNode = factory.makeASTNode("MaxArrayNode").addLabel(maxValue.image);
    arrayNode.addChild(minArrayNode).addChild(maxArrayNode);
    return arrayNode;
  }
}

void subprogram_decls() :
{
  ASTNode subProgramDeclarations = factory.makeASTNode("SubProgDecl");
  ASTNode subProgramDeclaration = null;
}
{
  (
    subProgramDeclsaration = subprogram_decl() < O_SEMICOLON >
    {
      subProgramDeclarations.addChild(subProgramDeclaration);
    }
  )+
}

void subprogram_decl() :
{
  ASTNode subProgramHead = null;
  ASTNode declarationsNode = null;
}
{
  subProgramHead = subprogram_head()
  (
    declarationsNode = decls()
  )?
  compound_stmt()
}

void subprogram_head() :
{
}
{
  (
    < O_FUNCTION > < O_IDENTIFIER >
    (
      arguments()
    )?
    < O_COLON > standard_type() < O_SEMICOLON >
  | < O_PROCEDURE > < O_IDENTIFIER >
    (
      arguments()
    )?
    < O_SEMICOLON >
  )
}

void arguments() :
{
}
{
  < O_LPAREN > parameter_list() < O_RPAREN >
}

void parameter_list() :
{
}
{
  identifier_list() < O_COLON > type()
  (
    < O_SEMICOLON > identifier_list() < O_COLON > type()
  )*
}

ASTNode compound_stmt() :
{
  ASTNode compoundStatement = null;
}
{
  < O_BEGIN > compoundStatement = stmt_list() < O_END >
  {
    return compoundStatement;
  }
}

ASTNode stmt_list() :
{
  ASTNode compoundStatement = factory.makeASTNode("CmpStmtNode");
  ASTNode statement = null;
}
{
  statement = stmt()
  {
    compoundStatement.addChild(statement);
  }
  (
    < O_SEMICOLON > statement = stmt()
    {
      compoundStatement.addChild(statement);
    }
  )*
  {
    return compoundStatement;
  }
}

ASTNode stmt() :
{
  ASTNode statement = null;
}
{
  (
    LOOKAHEAD(2)
    statement = assignment()
  | if_stmt()
  | while_stmt()
  | procedure_invocation()
  | i_o_stmt()
  | compound_stmt()
  | return_stmt()
  | case_stmt()
  )
  {
    return statement;
  }
}

ASTNode assignment() :
{
  ASTNode statement = factory.makeASTNode("StmtNode");
  ASTNode assignment = factory.makeASTNode("AssignmentNode");
  ASTNode idDefinitionNode = null;
  ASTNode expressionNode = null;
}
{
  idDefinitionNode = variable() < O_ASSIGN > expressionNode = expr()
  {
    assignment.addChild(idDefinitionNode).addChild(expressionNode);
    statement.addChild(assignment);
    return statement;
  }
}

void if_stmt() :
{
}
{
  < O_IF > expr() < O_THEN > stmt()
  [
    LOOKAHEAD(< O_ELSE >)
    < O_ELSE > stmt()
  ]
}

void while_stmt() :
{
}
{
  < O_WHILE > expr() < O_DO > stmt()
}

void procedure_invocation() :
{
}
{
  < O_IDENTIFIER > < O_LPAREN >
  (
    expr_list()
  )?
  < O_RPAREN >
}

void i_o_stmt() :
{
}
{
  (
    < O_READ > < O_LPAREN > variable() < O_RPAREN >
  | < O_WRITE > < O_LPAREN >
    (
      expr()
    | string()
    )
    < O_RPAREN >
  )
}

void return_stmt() :
{
}
{
  < O_RETURN > expr()
}

void case_stmt() :
{
}
{
  < O_CASE > expr() < O_OF >
  (
    cases()
  )?
  < O_END >
}

void cases() :
{
}
{
  case_element()
  (
    < O_SEMICOLON > case_element()
  )*
}

void case_element() :
{
}
{
  case_labels() < O_COLON > stmt()
}

void case_labels() :
{
}
{
  (
    < O_INT >
  | < O_FLOATCON >
  )
  (
    < O_COMMA >
    (
      < O_INT >
    | < O_FLOATCON >
    )
  )*
}

ASTNode expr_list() :
{
  ASTNode expressionListNode = factory.makeASTNode("ExpListNode");
  ASTNode expressionNode = null;
}
{
  expressionNode = expr()
  {
    expressionListNode.addChild(expressionNode);
  }
  (
    < O_COMMA > expressionNode = expr()
    {
      expressionListNode.addChild(expressionNode);
    }
  )*
  {
    return expressionListNode;
  }
}

ASTNode expr() :
{
  ASTNode expressionNode = factory.makeASTNode("ExpNode");
  ASTNode factorNode = null;
}
{
  factorNode = term1() exprPrime()
  {
    expressionNode.addChild(factorNode);
    return expressionNode;
  }
}

void exprPrime() :
{
}
{
  (
    < O_OR > term1() exprPrime()
  | < O_AND > term1() exprPrime()
  |
    {}
  )
}

ASTNode term1() :
{
  ASTNode factorNode = null;
}
{
  factorNode = term2() term1Prime()
  {
    return factorNode;
  }
}

void term1Prime() :
{
}
{
  (
    < O_LT > term2() term1Prime()
  | < O_LE > term2() term1Prime()
  | < O_GT > term2() term1Prime()
  | < O_GE > term2() term1Prime()
  | < O_NE > term2() term1Prime()
  | < O_EQ > term2() term1Prime()
  |
    {}
  )
}

ASTNode term2() :
{
  ASTNode factorNode = null;
}
{
  factorNode = term3() factorNode = term2Prime(factorNode)
  {
    return factorNode;
  }
}

ASTNode term2Prime(ASTNode leftFactorNode) :
{
  ASTNode rightFactorNode = null;
}
{
  (
    < O_PLUS > rightFactorNode = term3()
    {
      ASTNode addNode = factory.makeASTNode("AddNode");
      addNode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = term2Prime(addNode)
  | < O_MINUS > rightFactorNode = term3()
    {
      ASTNode subNode = factory.makeASTNode("SubNode");
      subNode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = term2Prime(subNode)
  |
    {}
  )
  {
    return leftFactorNode;
  }
}

ASTNode term3() :
{
  ASTNode factorNode = null;
}
{
  factorNode = factor() factorNode = term3Prime(factorNode)
  {
    return factorNode;
  }
}

ASTNode term3Prime(ASTNode leftFactorNode) :
{
  ASTNode rightFactorNode = null;
}
{
  (
    < O_TIMES > rightFactorNode = factor()
    {
      ASTNode multiplicationNode = factory.makeASTNode("MulNode");
      multiplicationNode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = term3Prime(multiplicationNode)
  | 
    < O_MOD > rightFactorNode = factor()
    {
      ASTNode modNode = factory.makeASTNode("ModNode");
      modNode.addChild(leftFactorNode).addChild(rightFactorNode);
    }
    leftFactorNode = term3Prime(modNode)
  |
    {}
  )
  {
    return leftFactorNode;
  }
}

ASTNode factor() :
{
  ASTNode factorNode = factory.makeASTNode("FactorNode");
  Token id;
  Token constant;
  ASTNode constantNode = null;
  ASTNode expressionNode = null;
  ASTNode secondFactorNode = null;
  ASTNode expressionListNode = null;
}
{
  (
    id = < O_IDENTIFIER >
    {
      ASTNode idReference = factory.makeASTNode("IdRefNode");
      idReference.addLabel(id.image);
      factorNode.addChild(idReference);
    }
    (
      < O_LBRACKET > expr() < O_RBRACKET >
    | < O_LPAREN >
      (
        expressionListNode = expr_list()
      )?
      < O_RPAREN >
      {
        ASTNode leftParen = factory.makeASTNode("ParenNode").addLabel("(");
    	ASTNode rightParen = factory.makeASTNode("ParenNode").addLabel(")");
    	factorNode.addChild(leftParen).addChild(expressionListNode).addChild(rightParen);
      }
    )?
  | constant = < O_INT >
    {
      constantNode = factory.makeASTNode("ConstantNode").addLabel(constant.image);
      factorNode.addChild(constantNode);
    }
  | constant = < O_FLOATCON >
    {
      constantNode = factory.makeASTNode("ConstantNode").addLabel(constant.image);
      factorNode.addChild(constantNode);
    }
  | constant = < O_CHAR >
    {
      constantNode = factory.makeASTNode("ConstantNode").addLabel(constant.image);
      factorNode.addChild(constantNode);
    }
  | < O_LPAREN > expressionNode = expr() < O_RPAREN >
  {
    ASTNode leftParen = factory.makeASTNode("ParenNode").addLabel("(");
    ASTNode rightParen = factory.makeASTNode("ParenNode").addLabel(")");
    factorNode.addChild(leftParen).addChild(expressionNode).addChild(rightParen);
  }
  | < O_NOT > secondFactorNode = factor()
  {
    ASTNode not = factory.makeASTNode("NotNode").addLabel("NOT");
    factorNode.addChild(not).addChild(secondFactorNode);
  }
  )
  {
    return factorNode;
  }
}

ASTNode variable() :
{
  ASTNode idDefinitionNode = factory.makeASTNode("IdDefNode");
  Token id;
}
{
  id = < O_IDENTIFIER >
  {
    idDefinitionNode.addLabel(id.image);
  }
  (
    < O_LBRACKET > expr() < O_RBRACKET >
  )?
  {
    return idDefinitionNode;
  }
}

void string() :
{
}
{
  < O_STRING >
}
